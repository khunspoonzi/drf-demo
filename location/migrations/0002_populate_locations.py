# Generated by Django 3.1.1 on 2021-09-13 06:57

# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ GENERAL IMPORTS
# └─────────────────────────────────────────────────────────────────────────────────────

import os

from datetime import datetime

# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ DJANGO IMPORTS
# └─────────────────────────────────────────────────────────────────────────────────────

from django.db import migrations, transaction
from django.utils.timezone import make_aware

# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ PROJECT IMPORTS
# └─────────────────────────────────────────────────────────────────────────────────────

from tools import load_json


# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ POPULATE LOCATIONS
# └─────────────────────────────────────────────────────────────────────────────────────


def populate_locations(apps, schema_editor):
    """ Populates City and Country models with location fixtures """

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ FIXTURES
    # └─────────────────────────────────────────────────────────────────────────────────

    # Define fixture path
    fixture_path = "location/fixtures/"

    # Get cities and countries
    cities, countries = [
        load_json(os.path.join(fixture_path, name + ".json"))
        for name in ("cities", "countries")
    ]

    # Return if either cities or countries is None
    if any([data is None for data in (cities, countries)]):
        return

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ MODELS
    # └─────────────────────────────────────────────────────────────────────────────────

    # Get City and Country models
    City = apps.get_model("location", "City")

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ COUNTRY
    # └─────────────────────────────────────────────────────────────────────────────────

    # Get Country model
    Country = apps.get_model("location", "Country")

    # Initialize a mapping of capital names by country ISO3
    capital_names_by_iso3 = {}

    # Define initialize country helper
    def initialize_country(country):
        """ Returns a Country object from a country dict """

        # Get is UN member at value
        is_un_member_at = country["is_un_member_at"]

        # Convert is UN member at to a timezone aware datetime
        country["is_un_member_at"] = is_un_member_at and make_aware(
            datetime.strptime(is_un_member_at, "%Y-%m-%d")
        )

        # Add capital name to capital names by ISO3
        capital_names_by_iso3[country["iso3"]] = country.pop("capital_name")

        # Get lowercase country ISO2
        iso2_lower = country["iso2"].lower().strip()

        # Add flag path to country
        country["flag"] = f"location/country/flag/{iso2_lower}.png"

        # Initialize Country instance
        country = Country(**country)

        # Clean Country instance
        country.clean()

        # Return country instance
        return country

    # Bulk create countries
    countries = Country.objects.bulk_create(
        [initialize_country(country) for country in countries]
    )

    # Create a mapping if country primary keys by ISO3
    country_pks_by_iso3 = {country.iso3: country.pk for country in countries}

    # Create a mapping of capital names by country primary key
    capital_names_by_country_pk = {
        country_pks_by_iso3[iso3]: capital_name
        for iso3, capital_name in capital_names_by_iso3.items()
    }

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ CITIES
    # └─────────────────────────────────────────────────────────────────────────────────

    # Get City model
    City = apps.get_model("location", "City")

    # Define initialize city helper
    def initialize_city(city):
        """ Returns a City object from a city dict """

        # Get country primary key
        country_pk = country_pks_by_iso3[city.pop("iso3")]

        # Get country primary key and set as ID
        city["country_id"] = country_pk

        # Initialize City instance
        city = City(**city)

        # Clean City instance
        city.clean()

        # Return city instance
        return city

    # Bulk create cities
    cities = City.objects.bulk_create([initialize_city(city) for city in cities])

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ COUNTRY CAPITALS
    # └─────────────────────────────────────────────────────────────────────────────────

    # Initialize atomic transaction block to reduce overhead
    with transaction.atomic():

        # Iterate over countries
        for iso3, country_pk in country_pks_by_iso3.items():

            # Get capital name
            capital_name = capital_names_by_country_pk[country_pk]

            # Get capital
            capital = [
                city
                for city in cities
                if city.country_id == country_pk and city.name == capital_name
            ]

            # Continue if no capital exists
            if not capital:
                continue

            # Get capital primary key
            capital_pk = capital[0].pk

            # Update country capital
            Country.objects.filter(pk=country_pk).update(capital_id=capital_pk)


# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ MIGRATION
# └─────────────────────────────────────────────────────────────────────────────────────


class Migration(migrations.Migration):
    """ Migration Class """

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ CLASS ATTRIBUTES
    # └─────────────────────────────────────────────────────────────────────────────────

    dependencies = [
        ("location", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(populate_locations),
    ]
