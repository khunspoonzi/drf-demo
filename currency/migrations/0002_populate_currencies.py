# Generated by Django 3.1.1 on 2021-09-14 07:31

# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ GENERAL IMPORTS
# └─────────────────────────────────────────────────────────────────────────────────────

import os

# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ DJANGO IMPORTS
# └─────────────────────────────────────────────────────────────────────────────────────

from django.db import migrations, transaction

# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ PROJECT IMPORTS
# └─────────────────────────────────────────────────────────────────────────────────────

from tools import load_json


# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ POPULATE CURRENCIES
# └─────────────────────────────────────────────────────────────────────────────────────


def populate_currencies(apps, schema_editor):
    """ Populates Currency model with currency fixtures """

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ FIXTURES
    # └─────────────────────────────────────────────────────────────────────────────────

    # Define fixture path
    fixture_path = "currency/fixtures/"

    # Get currencies
    currencies = load_json(os.path.join(fixture_path, "currencies.json"))

    # Return if currencies is None
    if currencies is None:
        return

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ COUNTRY
    # └─────────────────────────────────────────────────────────────────────────────────

    # Get Currency model
    Country = apps.get_model("location", "Country")

    # Get country ISO3 and primary keys
    countries = Country.objects.all().values_list("iso3", "pk")

    # Create a mapping if country primary keys by ISO3
    country_pks_by_iso3 = {iso3: pk for (iso3, pk) in countries}

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ CURRENCY
    # └─────────────────────────────────────────────────────────────────────────────────

    # Get Currency model
    Currency = apps.get_model("currency", "Currency")

    # Initialize mapping of country ISO3s by currency code
    iso3s_by_currency_code = {}

    # Define initialize currency helper
    def initialize_currency(currency):
        """ Returns a Currency object from a currency dict """

        # Get currency code
        currency_code = currency["code"]

        # Add country ISO3s to ISO3s by currency code
        iso3s_by_currency_code[currency_code] = currency.pop("iso3s")

        # Get country primary key
        country_pk = country_pks_by_iso3.get(currency.pop("iso3"), None)

        # Set country primary key as ID
        currency["country_id"] = country_pk

        # Check if currency is Euro (need European Union flag)
        if currency_code == "EUR":

            # Add flag path to currency
            currency["flag"] = "location/country/flag/eu.png"

        # Initialize Currency instance
        currency = Currency(**currency)

        # Clean Currency instance
        currency.clean()

        # Return currency instance
        return currency

    # Bulk create currencies
    currencies = Currency.objects.bulk_create(
        [initialize_currency(currency) for currency in currencies]
    )

    # Create a mapping of currency primary keys by currency code
    currency_pks_by_code = {currency.code: currency.pk for currency in currencies}

    # Create a mapping of country ISO3s by currency primary key
    iso3s_by_currency_pk = {
        currency_pks_by_code[code]: iso3s
        for code, iso3s in iso3s_by_currency_code.items()
    }

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ COUNTRY CURRENCIES
    # └─────────────────────────────────────────────────────────────────────────────────

    # Initialize atomic transaction block to reduce overhead
    with transaction.atomic():

        # Iterate over currencies
        for currency_pk, iso3s in iso3s_by_currency_pk.items():

            # Update all countries that use this currency
            Country.objects.filter(iso3__in=iso3s).update(currency_id=currency_pk)


# ┌─────────────────────────────────────────────────────────────────────────────────────
# │ MIGRATION
# └─────────────────────────────────────────────────────────────────────────────────────


class Migration(migrations.Migration):
    """ Migration Class """

    # ┌─────────────────────────────────────────────────────────────────────────────────
    # │ CLASS ATTRIBUTES
    # └─────────────────────────────────────────────────────────────────────────────────

    dependencies = [
        ("currency", "0001_initial"),
        ("location", "0003_country_currency"),
    ]

    operations = [
        migrations.RunPython(populate_currencies),
    ]
